/* EVEN FIBONACCI NUMBERS
==========================
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

Date : 27 Aug 2016
*/

#include <iostream>
using namespace std;

int main()
{
	// n-th even Fibonacci number is the 2+3(n-1)th Fibonacci number
	// Strategy: to add previous 2 odd Fibonacci numbers to get the next even Fibonacci number 

	const int seed1 = 1, seed2 = 2, limit = 4000000;
	int tempFiboNo, prevFiboNo=seed1+seed2, curFiboNo=seed2+prevFiboNo, 
		sum = 2;
	
	std::cout << "Even Fibonacci numbers: " << seed2;
	while (true)
	{
		tempFiboNo = curFiboNo;
		curFiboNo = prevFiboNo+curFiboNo;
		if (curFiboNo > limit)
			break;
		else 
			sum += curFiboNo;
		std::cout << ", " << curFiboNo;
		prevFiboNo = tempFiboNo + curFiboNo;
		curFiboNo = curFiboNo + prevFiboNo;
	}

	std::cout << std::endl << "The sum of even Fibonacci numbers below or equal to four million is " << sum << std::endl;

	return 0;
}
